/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Shanghai-Lunara/helixsaga-operator/pkg/apis/helixsaga/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HelixSagaLister helps list HelixSagas.
type HelixSagaLister interface {
	// List lists all HelixSagas in the indexer.
	List(selector labels.Selector) (ret []*v1.HelixSaga, err error)
	// HelixSagas returns an object that can list and get HelixSagas.
	HelixSagas(namespace string) HelixSagaNamespaceLister
	HelixSagaListerExpansion
}

// helixSagaLister implements the HelixSagaLister interface.
type helixSagaLister struct {
	indexer cache.Indexer
}

// NewHelixSagaLister returns a new HelixSagaLister.
func NewHelixSagaLister(indexer cache.Indexer) HelixSagaLister {
	return &helixSagaLister{indexer: indexer}
}

// List lists all HelixSagas in the indexer.
func (s *helixSagaLister) List(selector labels.Selector) (ret []*v1.HelixSaga, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelixSaga))
	})
	return ret, err
}

// HelixSagas returns an object that can list and get HelixSagas.
func (s *helixSagaLister) HelixSagas(namespace string) HelixSagaNamespaceLister {
	return helixSagaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelixSagaNamespaceLister helps list and get HelixSagas.
type HelixSagaNamespaceLister interface {
	// List lists all HelixSagas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.HelixSaga, err error)
	// Get retrieves the HelixSaga from the indexer for a given namespace and name.
	Get(name string) (*v1.HelixSaga, error)
	HelixSagaNamespaceListerExpansion
}

// helixSagaNamespaceLister implements the HelixSagaNamespaceLister
// interface.
type helixSagaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HelixSagas in the indexer for a given namespace.
func (s helixSagaNamespaceLister) List(selector labels.Selector) (ret []*v1.HelixSaga, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HelixSaga))
	})
	return ret, err
}

// Get retrieves the HelixSaga from the indexer for a given namespace and name.
func (s helixSagaNamespaceLister) Get(name string) (*v1.HelixSaga, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("helixsaga"), name)
	}
	return obj.(*v1.HelixSaga), nil
}
